#!/usr/bin/env python
# -*- coding: UTF8 -*-
"""
http://en.wikipedia.org/wiki/Model-view-controller

The SniffApp class sets up all of sniff's widgets.

Data storage is handled by the SniffModel class.
There is no SniffView class; we just use a GtkTreeView.
Data display is handled by the SniffController class.
"""
from dogtail.utils import checkForA11yInteractively
checkForA11yInteractively()
from dogtail import tree
pyatspi = tree.pyatspi
from dogtail import utils
import gobject
import gtk

class SniffApp(object):
    appName = 'Sniff'
    appAuthors = ['Zack Cerza <zcerza@redhat.com>', \
            'David Malcolm <dmalcolm@redhat.com']

    def __init__(self):

        import gnome
        self.program = gnome.program_init(self.appName, '0.1')
        import gtk.glade

        import os
        if os.path.exists('sniff.glade'):
            self.x = gtk.glade.XML('sniff.glade')
        else:
            import sys
            exec_root = sys.argv[0].split("/bin/")[0]
            if exec_root[0] is not '/':
                exec_root = "/usr"
            self.x = gtk.glade.XML(exec_root + \
                    '/share/dogtail/glade/sniff.glade')

        self.app = self.x.get_widget(self.appName)

        try:
            self.app.set_icon_from_file('../icons/dogtail-head.svg')
        except Exception:
            self.app.set_icon_from_file( \
                    '/usr/share/icons/hicolor/scalable/apps/dogtail-head.svg')


        self.setUpWidgets()
        self.connectSignals()
        self.app.show_all()
        gtk.main()

    def setUpWidgets(self):
        self.quit1 = self.x.get_widget('quit1')
        self.expand_all1 = self.x.get_widget('expand_all1')
        self.collapse_all1 = self.x.get_widget('collapse_all1')
        self.about1 = self.x.get_widget('about1')
        self.refreshMenuItem = self.x.get_widget('refresh1')
        self.about = None

        view = self.x.get_widget('treeTreeView')
        nameTextLabel = self.x.get_widget('nameTextLabel')
        roleNameTextLabel = self.x.get_widget('roleNameTextLabel')
        descTextLabel = self.x.get_widget('descTextLabel')
        actionsTextLabel = self.x.get_widget('actionsTextLabel')
        textLabel = self.x.get_widget('textLabel')
        textTextView = self.x.get_widget('textTextView')
        self.tree = SniffController(view, nameTextLabel, roleNameTextLabel, \
                descTextLabel, actionsTextLabel, textLabel, textTextView)

    def connectSignals(self):
        self.app.connect('delete_event', self.quit, self)
        self.quit1.connect('activate', self.quit, self)
        self.expand_all1.connect('activate', self.tree.expandAll, True)
        self.collapse_all1.connect('activate', self.tree.expandAll, False)
        self.about1.connect('activate', self.showAbout, self)
        self.refreshMenuItem.connect('activate', self.tree.reset)

    def showAbout(self, *args):
        if not self.about:
            self.about = gtk.AboutDialog()
            self.about.set_name(self.appName)
            self.about.set_authors(self.appAuthors)
            self.about.set_comments('Explore your desktop with Dogtail')
            self.about.set_website('http://people.redhat.com/zcerza/dogtail/')
            self.about.connect("response", self.hideAbout)
        self.about.show_all()

    def hideAbout(self, window, response):
        if response == gtk.RESPONSE_CANCEL: window.hide()

    def quit(self, *args):
        gtk.main_quit()


class SniffController(object):
    def __init__(self, view, nameLabel, roleNameLabel, descLabel, \
            actionsLabel, textLabel, textView):
        self.nameTextLabel = nameLabel
        self.nameTextLabel.set_text('')
        self.roleNameTextLabel = roleNameLabel
        self.roleNameTextLabel.set_text('')
        self.descTextLabel = descLabel
        self.descTextLabel.set_text('')
        self.actionsTextLabel = actionsLabel
        self.actionsTextLabel.set_text('')
        self.textLabel = textLabel
        self.textTextView = textView
        self.textTextViewBufferChangedLastHandlerID = 3.141592654
        self.textTextView.set_sensitive(False)
        self.textTextView.get_buffer().set_text('')
        self.view = view
        self.treeSelection = self.view.get_selection()
        self.model = SniffModel()
        self.setUpView()
        self.connectSignals()

    def setUpView(self):
        self.view.set_model(self.model)

        col = gtk.TreeViewColumn()
        cellRenderer = gtk.CellRendererPixbuf()
        col.pack_start(cellRenderer, expand = False)
        col.set_cell_data_func(cellRenderer, self.getCellPixbufForNode)

        cellRenderer = gtk.CellRendererText()
        col.pack_end(cellRenderer, expand = False)
        col.set_cell_data_func(cellRenderer, self.nameDataFunc)

        col.set_title('Name')

        self.view.insert_column(col, -1)

        for column in self.view.get_columns():
            column.set_sizing(gtk.TREE_VIEW_COLUMN_AUTOSIZE)
            column.set_resizable(True)
        self.view.show()
        path = 0
        self.view.expand_row(path, False)
        self.rowExpanded(self.view, self.model.get_iter(path), path)

    def nameDataFunc(self, column, cell, model, iter):
        node = model.getNode(iter)
        try:
            name = node.name
        except Exception:
            model.deadRows.add( \
                    gtk.TreeRowReference(model, model.get_path(iter)))
            return
        cell.set_property('text', name)

    def reset(self, *args):
        self.model.reset()
        rootPath = self.model.get_path(self.model.get_iter_root())
        self.view.expand_row(rootPath, False)

    def connectSignals(self):
        self.view.connect('button-press-event', self.buttonPress)
        self.view.connect('row-expanded', self.rowExpanded, self.model)
        self.view.connect('row-collapsed', self.rowCollapsed)
        self.treeSelection.connect('changed', self.selectionChanged)

    def selectionChanged(self, treeSelection):
        node = self.getSelectedNode()
        if node: node.blink()

    def getSelectedNode(self):
        (store, iter) = self.view.get_selection().get_selected()
        if not iter: node = None
        else: node = self.model.getNode(iter)
        return node

    def expandAll(self, widget, *args):
        if args[0] == True: self.view.expand_all()
        elif args[0] == False: self.view.collapse_all()

    def rowExpanded(self, treeview, iter, path, *userParams):
        row = self.model[path]
        childRows = row.iterchildren()
        while True:
            try:
                childRow = childRows.next()
                self.model.populateChildren(childRow.iter)
            except StopIteration: break

    def rowCollapsed(self, treeview, iter, path, *userParams):
        row = self.model[path]
        childRows = row.iterchildren()
        try:
            while True:
                childRow = childRows.next()
                grandChildRows = childRow.iterchildren()
                try:
                    while True:
                        grandChildRow = grandChildRows.next()
                        self.model.remove(grandChildRow.iter)
                except StopIteration: pass
        except StopIteration: pass

    def menuItemActivate(self, menuItem, *userParams):
        if len(userParams) < 2: return
        method = userParams[0]
        arg = userParams[1]
        method(arg)

    def buttonPress(self, widget, event, *userParams):
        try: path, treeViewCol, relX, relY = \
                        self.view.get_path_at_pos(int(event.x), int(event.y))
        except TypeError: return
        node = self.model.getNode(self.model.get_iter(path))
        if node == None: return
        self.setUpTable(node)

        if event.button == 3:
            menu = gtk.Menu()
            menuItem = None
            if node.actions:
                for action in node.actions.keys():
                    menuItem = gtk.MenuItem(action.capitalize())
                    menuItem.connect('activate', self.menuItemActivate, \
                            node.doAction, action)
                    menuItem.show()
                    menu.append(menuItem)
            if not menuItem: return
            menu.show()
            menu.popup(None, None, None, event.button, event.time)

    def setUpTable(self, node):
        """Generic code for setting up the table under the TreeView"""
        if node == None: return
        self.nameTextLabel.set_text(node.name)
        self.roleNameTextLabel.set_text(node.roleName)
        self.descTextLabel.set_text(node.description)
        str = ''
        if node.actions: str = ' '.join(node.actions.keys())
        self.actionsTextLabel.set_text(str)

        # Have we connected this signal yet? 
        # If so, disconnect it before proceeding.
        if int(self.textTextViewBufferChangedLastHandlerID) == \
                self.textTextViewBufferChangedLastHandlerID:
            self.textTextView.get_buffer().disconnect( \
                    self.textTextViewBufferChangedLastHandlerID)

        if node.text is not None:
            buffer = self.textTextView.get_buffer()
            buffer.set_text(node.text)
            try:
                node.queryEditableText()
                # Remember the handler ID of this connection.
                self.textTextView.set_sensitive(True)
                self.textTextViewBufferChangedLastHandlerID = \
                        buffer.connect('changed', self.changeText, node)
            except NotImplementedError:
                self.textTextView.set_sensitive(False)
        else:
            self.textTextView.get_buffer().set_text('')
            self.textTextView.set_sensitive(False)

    def changeText(self, textBuffer, node):
        if node == None: return
        node.text = textBuffer.get_text(textBuffer.get_start_iter(), \
                        textBuffer.get_end_iter())

    def getPixbufForNode(self, node):
        theme = gtk.icon_theme_get_default()
        try:
            if node.role == pyatspi.ROLE_APPLICATION:
                # FIXME: Use the pixbuf from libwcnk (if available):
                # wnckApp = Application(node).getWnckApplication()
                # if wnckApp
                try: 
                    return theme.load_icon(node.name, 24, \
                            gtk.ICON_LOOKUP_USE_BUILTIN)
                except gobject.GError:
                    try: 
                        return theme.load_icon(node.name.lower(), 24, \
                            gtk.ICON_LOOKUP_USE_BUILTIN)
                    except gobject.GError: 
                        return None
            elif node.parent:
                return iconForRole[node.role]
            else:
                return theme.load_icon("gnome-fs-desktop", 24, \
                        gtk.ICON_LOOKUP_USE_BUILTIN)
        except Exception:
            return theme.load_icon("gtk-dialog-error", 24, \
                    gtk.ICON_LOOKUP_USE_BUILTIN)

    def getCellPixbufForNode(self, column, cell, model, iter):
        node = self.model.getNode(iter)
        pixbuf = self.getPixbufForNode(node)
        cell.set_property('pixbuf', pixbuf)


class SniffModel(gtk.TreeStore):
    nodeColumn = 0
    deadRows = set()

    def __init__(self, root = tree.root):
        gtk.TreeStore.__init__(self, gobject.TYPE_PYOBJECT)
        if root: self.appendAndPopulate(None, root)
        gobject.timeout_add(1000, self.checkNodes)

    def checkNodes(self):
        for row in self.deadRows:
            if row.valid():
                self.remove(self.get_iter(row.get_path()))
        self.deadRows.clear()
        return True

    def reset(self, *args):
        self.clear()
        self.appendAndPopulate(None, tree.root)

    def append(self, parentIter, node):
        return gtk.TreeStore.append(self, parentIter, (node,))

    def populateChildren(self, iter):
        node = self.getNode(iter)
        for child in node.children: self.append(iter, child)

    def appendAndPopulate(self, iter, node):
        childIter = self.append(iter, node)
        self.populateChildren(childIter)

    def getNode(self, iter):
        return self.get_value(iter, self.nodeColumn)



def loadIcon(iconName):
    try:
        pixbuf = gtk.gdk.pixbuf_new_from_file('icons/' + iconName)
    except gobject.GError:
        iconName = '/usr/share/dogtail/icons/' + iconName
        pixbuf = gtk.gdk.pixbuf_new_from_file(iconName)
    return pixbuf

button_xpm = loadIcon("button.xpm")
checkbutton_xpm = loadIcon("checkbutton.xpm")
checkmenuitem_xpm = loadIcon("checkmenuitem.xpm")
colorselection_xpm = loadIcon("colorselection.xpm")
combo_xpm = loadIcon("combo.xpm")
dialog_xpm = loadIcon("dialog.xpm")
image_xpm = loadIcon("image.xpm")
label_xpm = loadIcon("label.xpm")
menubar_xpm = loadIcon("menubar.xpm")
menuitem_xpm = loadIcon("menuitem.xpm")
notebook_xpm = loadIcon("notebook.xpm")
scrolledwindow_xpm = loadIcon("scrolledwindow.xpm")
spinbutton_xpm = loadIcon("spinbutton.xpm")
statusbar_xpm = loadIcon("statusbar.xpm")
table_xpm = loadIcon("table.xpm")
text_xpm = loadIcon("text.xpm")
toolbar_xpm = loadIcon("toolbar.xpm")
tree_xpm = loadIcon("tree.xpm")
treeitem_xpm = loadIcon("treeitem.xpm")
unknown_xpm = loadIcon("unknown.xpm")
viewport_xpm = loadIcon("viewport.xpm")
vscrollbar_xpm = loadIcon("vscrollbar.xpm")
vseparator_xpm = loadIcon("vseparator.xpm")
window_xpm = loadIcon("window.xpm")

iconForRole = { \
        pyatspi.ROLE_INVALID : None, \
        # pyatspi doesn't have the following... not even sure if it exists 
        # anywhere.
        #atspi.SPI_ROLE_ACCEL_LABEL : label_xpm, \
        pyatspi.ROLE_ALERT : None, \
        pyatspi.ROLE_ANIMATION : None, \
        pyatspi.ROLE_ARROW : None, \
        pyatspi.ROLE_CALENDAR : None, \
        pyatspi.ROLE_CANVAS : None, \
        pyatspi.ROLE_CHECK_BOX : checkbutton_xpm, \
        pyatspi.ROLE_CHECK_MENU_ITEM : checkmenuitem_xpm, \
        pyatspi.ROLE_COLOR_CHOOSER : colorselection_xpm, \
        pyatspi.ROLE_COLUMN_HEADER : None, \
        pyatspi.ROLE_COMBO_BOX : combo_xpm, \
        pyatspi.ROLE_DATE_EDITOR : None, \
        pyatspi.ROLE_DESKTOP_ICON : None, \
        pyatspi.ROLE_DESKTOP_FRAME : None, \
        pyatspi.ROLE_DIAL : None, \
        pyatspi.ROLE_DIALOG : dialog_xpm, \
        pyatspi.ROLE_DIRECTORY_PANE : None, \
        pyatspi.ROLE_DRAWING_AREA : None, \
        pyatspi.ROLE_FILE_CHOOSER : None, \
        pyatspi.ROLE_FILLER : None, \
        pyatspi.ROLE_FONT_CHOOSER : None, \
        pyatspi.ROLE_FRAME : window_xpm, \
        pyatspi.ROLE_GLASS_PANE : None, \
        pyatspi.ROLE_HTML_CONTAINER : None, \
        pyatspi.ROLE_ICON : image_xpm, \
        pyatspi.ROLE_IMAGE : image_xpm, \
        pyatspi.ROLE_INTERNAL_FRAME : None, \
        pyatspi.ROLE_LABEL : label_xpm, \
        pyatspi.ROLE_LAYERED_PANE : viewport_xpm, \
        pyatspi.ROLE_LIST : None, \
        pyatspi.ROLE_LIST_ITEM : None, \
        pyatspi.ROLE_MENU : menuitem_xpm, \
        pyatspi.ROLE_MENU_BAR : menubar_xpm, \
        pyatspi.ROLE_MENU_ITEM : menuitem_xpm, \
        pyatspi.ROLE_OPTION_PANE : None, \
        pyatspi.ROLE_PAGE_TAB : notebook_xpm, \
        pyatspi.ROLE_PAGE_TAB_LIST : notebook_xpm, \
        pyatspi.ROLE_PANEL : viewport_xpm, \
        pyatspi.ROLE_PASSWORD_TEXT : None, \
        pyatspi.ROLE_POPUP_MENU : None, \
        pyatspi.ROLE_PROGRESS_BAR : None, \
        pyatspi.ROLE_PUSH_BUTTON : button_xpm, \
        pyatspi.ROLE_RADIO_BUTTON : None, \
        pyatspi.ROLE_RADIO_MENU_ITEM : None, \
        pyatspi.ROLE_ROOT_PANE : viewport_xpm, \
        pyatspi.ROLE_ROW_HEADER : None, \
        pyatspi.ROLE_SCROLL_BAR : vscrollbar_xpm, \
        pyatspi.ROLE_SCROLL_PANE : scrolledwindow_xpm, \
        pyatspi.ROLE_SEPARATOR : vseparator_xpm, \
        pyatspi.ROLE_SLIDER : None, \
        pyatspi.ROLE_SPIN_BUTTON : spinbutton_xpm, \
        pyatspi.ROLE_SPLIT_PANE : None, \
        pyatspi.ROLE_STATUS_BAR : statusbar_xpm, \
        pyatspi.ROLE_TABLE : table_xpm, \
        pyatspi.ROLE_TABLE_CELL : treeitem_xpm, \
        pyatspi.ROLE_TABLE_COLUMN_HEADER : None, \
        pyatspi.ROLE_TABLE_ROW_HEADER : None, \
        pyatspi.ROLE_TEAROFF_MENU_ITEM : None, \
        pyatspi.ROLE_TERMINAL : None, \
        pyatspi.ROLE_TEXT : text_xpm, \
        pyatspi.ROLE_TOGGLE_BUTTON : None, \
        pyatspi.ROLE_TOOL_BAR : toolbar_xpm, \
        pyatspi.ROLE_TOOL_TIP : None, \
        pyatspi.ROLE_TREE : tree_xpm, \
        pyatspi.ROLE_TREE_TABLE : tree_xpm, \
        pyatspi.ROLE_UNKNOWN : unknown_xpm, \
        pyatspi.ROLE_VIEWPORT : viewport_xpm, \
        pyatspi.ROLE_WINDOW : window_xpm, \
        pyatspi.ROLE_EXTENDED : None, \
        pyatspi.ROLE_HEADER : None, \
        pyatspi.ROLE_FOOTER : None, \
        pyatspi.ROLE_PARAGRAPH : None, \
        pyatspi.ROLE_RULER : None, \
        pyatspi.ROLE_APPLICATION : None, \
        pyatspi.ROLE_AUTOCOMPLETE : None, \
        pyatspi.ROLE_EDITBAR : None, \
        pyatspi.ROLE_EMBEDDED : None, \
        pyatspi.ROLE_LAST_DEFINED: None }


def main():
    sniff = SniffApp()

if __name__ == '__main__': main()
